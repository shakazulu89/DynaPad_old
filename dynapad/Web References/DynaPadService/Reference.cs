// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DynaPad.DynaPadService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DynaPadServiceSoap", Namespace="http://tempuri.org/")]
    public partial class DynaPadService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnswerPresetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAnswerPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDictationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormDictationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportToPdfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllQuestionnairesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitFormAnswersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormQuestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetShortFormsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateShortFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateReportOperationCompleted;
        
        /// CodeRemarks
        public DynaPadService() {
            this.Url = "http://test.dynadox.pro/dynawcfservice/dynapadservice.asmx";
        }
        
        public DynaPadService(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// CodeRemarks
        public event GetAnswerPresetsCompletedEventHandler GetAnswerPresetsCompleted;
        
        /// CodeRemarks
        public event SaveAnswerPresetCompletedEventHandler SaveAnswerPresetCompleted;
        
        /// CodeRemarks
        public event SaveDictationCompletedEventHandler SaveDictationCompleted;
        
        /// CodeRemarks
        public event GetFormDictationsCompletedEventHandler GetFormDictationsCompleted;
        
        /// CodeRemarks
        public event GetMenuJsonCompletedEventHandler GetMenuJsonCompleted;
        
        /// CodeRemarks
        public event ExportToPdfCompletedEventHandler ExportToPdfCompleted;
        
        /// CodeRemarks
        public event GetAllQuestionnairesCompletedEventHandler GetAllQuestionnairesCompleted;
        
        /// CodeRemarks
        public event SubmitFormAnswersCompletedEventHandler SubmitFormAnswersCompleted;
        
        /// CodeRemarks
        public event GetFormQuestionsCompletedEventHandler GetFormQuestionsCompleted;
        
        /// CodeRemarks
        public event GetDoctorInputCompletedEventHandler GetDoctorInputCompleted;
        
        /// CodeRemarks
        public event GetShortFormsCompletedEventHandler GetShortFormsCompleted;
        
        /// CodeRemarks
        public event CreateShortFormCompletedEventHandler CreateShortFormCompleted;
        
        /// CodeRemarks
        public event GenerateReportCompletedEventHandler GenerateReportCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// CodeRemarks
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAnswerPresets", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetAnswerPresets(string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            object[] results = this.Invoke("GetAnswerPresets", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAnswerPresetsAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            this.GetAnswerPresetsAsync(formId, sectionId, doctorId, isDocInput, locationId, null);
        }
        
        /// CodeRemarks
        public void GetAnswerPresetsAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId, object userState) {
            if ((this.GetAnswerPresetsOperationCompleted == null)) {
                this.GetAnswerPresetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnswerPresetsOperationCompleted);
            }
            this.InvokeAsync("GetAnswerPresets", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId}, this.GetAnswerPresetsOperationCompleted, userState);
        }
        
        private void OnGetAnswerPresetsOperationCompleted(object arg) {
            if ((this.GetAnswerPresetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnswerPresetsCompleted(this, new GetAnswerPresetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveAnswerPreset", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveAnswerPreset(string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId) {
            object[] results = this.Invoke("SaveAnswerPreset", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        presetName,
                        presetJson,
                        locationId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void SaveAnswerPresetAsync(string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId) {
            this.SaveAnswerPresetAsync(formId, sectionId, doctorId, isDocInput, presetName, presetJson, locationId, null);
        }
        
        /// CodeRemarks
        public void SaveAnswerPresetAsync(string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId, object userState) {
            if ((this.SaveAnswerPresetOperationCompleted == null)) {
                this.SaveAnswerPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAnswerPresetOperationCompleted);
            }
            this.InvokeAsync("SaveAnswerPreset", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        presetName,
                        presetJson,
                        locationId}, this.SaveAnswerPresetOperationCompleted, userState);
        }
        
        private void OnSaveAnswerPresetOperationCompleted(object arg) {
            if ((this.SaveAnswerPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAnswerPresetCompleted(this, new SaveAnswerPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveDictation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveDictation(string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrDictation) {
            object[] results = this.Invoke("SaveDictation", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId,
                        dictationTitle,
                        arrDictation});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void SaveDictationAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, byte[] arrDictation) {
            this.SaveDictationAsync(formId, sectionId, doctorId, isDocInput, locationId, dictationTitle, arrDictation, null);
        }
        
        /// CodeRemarks
        public void SaveDictationAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, byte[] arrDictation, object userState) {
            if ((this.SaveDictationOperationCompleted == null)) {
                this.SaveDictationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDictationOperationCompleted);
            }
            this.InvokeAsync("SaveDictation", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId,
                        dictationTitle,
                        arrDictation}, this.SaveDictationOperationCompleted, userState);
        }
        
        private void OnSaveDictationOperationCompleted(object arg) {
            if ((this.SaveDictationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDictationCompleted(this, new SaveDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFormDictations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetFormDictations(string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            object[] results = this.Invoke("GetFormDictations", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void GetFormDictationsAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            this.GetFormDictationsAsync(formId, sectionId, doctorId, isDocInput, locationId, null);
        }
        
        /// CodeRemarks
        public void GetFormDictationsAsync(string formId, string sectionId, string doctorId, bool isDocInput, string locationId, object userState) {
            if ((this.GetFormDictationsOperationCompleted == null)) {
                this.GetFormDictationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormDictationsOperationCompleted);
            }
            this.InvokeAsync("GetFormDictations", new object[] {
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId}, this.GetFormDictationsOperationCompleted, userState);
        }
        
        private void OnGetFormDictationsOperationCompleted(object arg) {
            if ((this.GetFormDictationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormDictationsCompleted(this, new GetFormDictationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMenuJson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMenuJson(string formID, string clientID, string ApptDate, bool isDocInput) {
            object[] results = this.Invoke("GetMenuJson", new object[] {
                        formID,
                        clientID,
                        ApptDate,
                        isDocInput});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetMenuJsonAsync(string formID, string clientID, string ApptDate, bool isDocInput) {
            this.GetMenuJsonAsync(formID, clientID, ApptDate, isDocInput, null);
        }
        
        /// CodeRemarks
        public void GetMenuJsonAsync(string formID, string clientID, string ApptDate, bool isDocInput, object userState) {
            if ((this.GetMenuJsonOperationCompleted == null)) {
                this.GetMenuJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuJsonOperationCompleted);
            }
            this.InvokeAsync("GetMenuJson", new object[] {
                        formID,
                        clientID,
                        ApptDate,
                        isDocInput}, this.GetMenuJsonOperationCompleted, userState);
        }
        
        private void OnGetMenuJsonOperationCompleted(object arg) {
            if ((this.GetMenuJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuJsonCompleted(this, new GetMenuJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExportToPdf", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportToPdf(string answers) {
            object[] results = this.Invoke("ExportToPdf", new object[] {
                        answers});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void ExportToPdfAsync(string answers) {
            this.ExportToPdfAsync(answers, null);
        }
        
        /// CodeRemarks
        public void ExportToPdfAsync(string answers, object userState) {
            if ((this.ExportToPdfOperationCompleted == null)) {
                this.ExportToPdfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportToPdfOperationCompleted);
            }
            this.InvokeAsync("ExportToPdf", new object[] {
                        answers}, this.ExportToPdfOperationCompleted, userState);
        }
        
        private void OnExportToPdfOperationCompleted(object arg) {
            if ((this.ExportToPdfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportToPdfCompleted(this, new ExportToPdfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllQuestionnaires", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllQuestionnaires(string userId) {
            object[] results = this.Invoke("GetAllQuestionnaires", new object[] {
                        userId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllQuestionnairesAsync(string userId) {
            this.GetAllQuestionnairesAsync(userId, null);
        }
        
        /// CodeRemarks
        public void GetAllQuestionnairesAsync(string userId, object userState) {
            if ((this.GetAllQuestionnairesOperationCompleted == null)) {
                this.GetAllQuestionnairesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllQuestionnairesOperationCompleted);
            }
            this.InvokeAsync("GetAllQuestionnaires", new object[] {
                        userId}, this.GetAllQuestionnairesOperationCompleted, userState);
        }
        
        private void OnGetAllQuestionnairesOperationCompleted(object arg) {
            if ((this.GetAllQuestionnairesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllQuestionnairesCompleted(this, new GetAllQuestionnairesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitFormAnswers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitFormAnswers(string answers, bool update, bool isDoctorInput) {
            object[] results = this.Invoke("SubmitFormAnswers", new object[] {
                        answers,
                        update,
                        isDoctorInput});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void SubmitFormAnswersAsync(string answers, bool update, bool isDoctorInput) {
            this.SubmitFormAnswersAsync(answers, update, isDoctorInput, null);
        }
        
        /// CodeRemarks
        public void SubmitFormAnswersAsync(string answers, bool update, bool isDoctorInput, object userState) {
            if ((this.SubmitFormAnswersOperationCompleted == null)) {
                this.SubmitFormAnswersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitFormAnswersOperationCompleted);
            }
            this.InvokeAsync("SubmitFormAnswers", new object[] {
                        answers,
                        update,
                        isDoctorInput}, this.SubmitFormAnswersOperationCompleted, userState);
        }
        
        private void OnSubmitFormAnswersOperationCompleted(object arg) {
            if ((this.SubmitFormAnswersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitFormAnswersCompleted(this, new SubmitFormAnswersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFormQuestions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormQuestions(string formID, string clientID, string ApptDate, bool isDocInput) {
            object[] results = this.Invoke("GetFormQuestions", new object[] {
                        formID,
                        clientID,
                        ApptDate,
                        isDocInput});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetFormQuestionsAsync(string formID, string clientID, string ApptDate, bool isDocInput) {
            this.GetFormQuestionsAsync(formID, clientID, ApptDate, isDocInput, null);
        }
        
        /// CodeRemarks
        public void GetFormQuestionsAsync(string formID, string clientID, string ApptDate, bool isDocInput, object userState) {
            if ((this.GetFormQuestionsOperationCompleted == null)) {
                this.GetFormQuestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormQuestionsOperationCompleted);
            }
            this.InvokeAsync("GetFormQuestions", new object[] {
                        formID,
                        clientID,
                        ApptDate,
                        isDocInput}, this.GetFormQuestionsOperationCompleted, userState);
        }
        
        private void OnGetFormQuestionsOperationCompleted(object arg) {
            if ((this.GetFormQuestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormQuestionsCompleted(this, new GetFormQuestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDoctorInput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDoctorInput(string formID) {
            object[] results = this.Invoke("GetDoctorInput", new object[] {
                        formID});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetDoctorInputAsync(string formID) {
            this.GetDoctorInputAsync(formID, null);
        }
        
        /// CodeRemarks
        public void GetDoctorInputAsync(string formID, object userState) {
            if ((this.GetDoctorInputOperationCompleted == null)) {
                this.GetDoctorInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorInputOperationCompleted);
            }
            this.InvokeAsync("GetDoctorInput", new object[] {
                        formID}, this.GetDoctorInputOperationCompleted, userState);
        }
        
        private void OnGetDoctorInputOperationCompleted(object arg) {
            if ((this.GetDoctorInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorInputCompleted(this, new GetDoctorInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShortForms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetShortForms(string qFormID, string docID, bool showcase) {
            object[] results = this.Invoke("GetShortForms", new object[] {
                        qFormID,
                        docID,
                        showcase});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetShortFormsAsync(string qFormID, string docID, bool showcase) {
            this.GetShortFormsAsync(qFormID, docID, showcase, null);
        }
        
        /// CodeRemarks
        public void GetShortFormsAsync(string qFormID, string docID, bool showcase, object userState) {
            if ((this.GetShortFormsOperationCompleted == null)) {
                this.GetShortFormsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShortFormsOperationCompleted);
            }
            this.InvokeAsync("GetShortForms", new object[] {
                        qFormID,
                        docID,
                        showcase}, this.GetShortFormsOperationCompleted, userState);
        }
        
        private void OnGetShortFormsOperationCompleted(object arg) {
            if ((this.GetShortFormsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetShortFormsCompleted(this, new GetShortFormsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateShortForm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateShortForm(string formID) {
            object[] results = this.Invoke("CreateShortForm", new object[] {
                        formID});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void CreateShortFormAsync(string formID) {
            this.CreateShortFormAsync(formID, null);
        }
        
        /// CodeRemarks
        public void CreateShortFormAsync(string formID, object userState) {
            if ((this.CreateShortFormOperationCompleted == null)) {
                this.CreateShortFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateShortFormOperationCompleted);
            }
            this.InvokeAsync("CreateShortForm", new object[] {
                        formID}, this.CreateShortFormOperationCompleted, userState);
        }
        
        private void OnCreateShortFormOperationCompleted(object arg) {
            if ((this.CreateShortFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateShortFormCompleted(this, new CreateShortFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateReport(string visitid, string patientid, string datecompleted, string fileName, string sFormId) {
            object[] results = this.Invoke("GenerateReport", new object[] {
                        visitid,
                        patientid,
                        datecompleted,
                        fileName,
                        sFormId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GenerateReportAsync(string visitid, string patientid, string datecompleted, string fileName, string sFormId) {
            this.GenerateReportAsync(visitid, patientid, datecompleted, fileName, sFormId, null);
        }
        
        /// CodeRemarks
        public void GenerateReportAsync(string visitid, string patientid, string datecompleted, string fileName, string sFormId, object userState) {
            if ((this.GenerateReportOperationCompleted == null)) {
                this.GenerateReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateReportOperationCompleted);
            }
            this.InvokeAsync("GenerateReport", new object[] {
                        visitid,
                        patientid,
                        datecompleted,
                        fileName,
                        sFormId}, this.GenerateReportOperationCompleted, userState);
        }
        
        private void OnGenerateReportOperationCompleted(object arg) {
            if ((this.GenerateReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateReportCompleted(this, new GenerateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAnswerPresetsCompletedEventHandler(object sender, GetAnswerPresetsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnswerPresetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnswerPresetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SaveAnswerPresetCompletedEventHandler(object sender, SaveAnswerPresetCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveAnswerPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveAnswerPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SaveDictationCompletedEventHandler(object sender, SaveDictationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveDictationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDictationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetFormDictationsCompletedEventHandler(object sender, GetFormDictationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormDictationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormDictationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetMenuJsonCompletedEventHandler(object sender, GetMenuJsonCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void ExportToPdfCompletedEventHandler(object sender, ExportToPdfCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportToPdfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportToPdfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetAllQuestionnairesCompletedEventHandler(object sender, GetAllQuestionnairesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllQuestionnairesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllQuestionnairesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void SubmitFormAnswersCompletedEventHandler(object sender, SubmitFormAnswersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitFormAnswersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitFormAnswersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetFormQuestionsCompletedEventHandler(object sender, GetFormQuestionsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormQuestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormQuestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDoctorInputCompletedEventHandler(object sender, GetDoctorInputCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetShortFormsCompletedEventHandler(object sender, GetShortFormsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetShortFormsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetShortFormsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CreateShortFormCompletedEventHandler(object sender, CreateShortFormCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateShortFormCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateShortFormCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GenerateReportCompletedEventHandler(object sender, GenerateReportCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
